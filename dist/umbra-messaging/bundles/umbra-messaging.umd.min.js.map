{"version":3,"sources":["ng://umbra-messaging/lib/shared/classes/toast-ref.ts","ng://umbra-messaging/lib/shared/classes/toast-config.ts","ng://umbra-messaging/lib/shared/animations/toast-fade.animation.ts","ng://umbra-messaging/lib/umbra-toast/umbra-toast.component.ts","ng://umbra-messaging/lib/shared/services/umbra-toast.service.ts","ng://umbra-messaging/lib/umbra-toast/umbra-toast.module.ts"],"names":["ToastRef","overlay","this","prototype","close","dispose","isVisible","overlayElement","getPosition","getBoundingClientRect","ToastData","defaultToastConfig","position","top","right","animation","fadeOut","fadeIn","toastData","type","TOAST_CONFIG_TOKEN","InjectionToken","toastAnimations","fadeToast","trigger","state","style","opacity","transition","animate","UmbraToastComponent","data","ref","animationState","iconType","ngOnInit","_this","intervalId","setTimeout","ngOnDestroy","clearTimeout","onFadeFinished","event","isFadeOut","toState","itFinished","Component","args","selector","template","animations","changeDetection","ChangeDetectionStrategy","OnPush","UmbraToastService","parentInjector","showToast","toastConfig","console","log","positionStrategy","getPositionStrategy","overlayRef","create","toastRef","injector","getInjector","toastPortal","ComponentPortal","attach","global","lastToast","bottom","tokens","WeakMap","set","PortalInjector","Injectable","providedIn","Overlay","Injector","UmbraToastModule","NgModule","declarations","imports","CommonModule","OverlayModule","MatIconModule","entryComponents"],"mappings":"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","sourcesContent":["import { OverlayRef } from '@angular/cdk/overlay';\r\n\r\nexport class ToastRef {\r\n    constructor(private readonly overlay: OverlayRef) { }\r\n\r\n    close() {\r\n        this.overlay.dispose();\r\n    }\r\n\r\n    isVisible() {\r\n        return this.overlay && this.overlay.overlayElement;\r\n    }\r\n\r\n    getPosition() {\r\n        return this.overlay.overlayElement.getBoundingClientRect();\r\n    }\r\n}\r\n","import { InjectionToken, TemplateRef } from '@angular/core';\r\nimport { ToastConfigInterface } from '../interfaces/toast-config.interface';\r\nimport { ToastType } from '../types/toast.type';\r\n\r\nexport class ToastData {\r\n    type: ToastType;\r\n    text?: string;\r\n    template?: TemplateRef<any>;\r\n    templateContext?: {};\r\n}\r\n\r\nexport const defaultToastConfig: ToastConfigInterface = {\r\n    position: {\r\n        top: 20,\r\n        right: 20,\r\n    },\r\n    animation: {\r\n        fadeOut: 2500,\r\n        fadeIn: 300,\r\n    },\r\n    toastData: {\r\n        type: 'success'\r\n    }\r\n};\r\n\r\nexport const TOAST_CONFIG_TOKEN = new InjectionToken<ToastConfigInterface>('toast-config');\r\n","import {\r\n    AnimationTriggerMetadata,\r\n    trigger,\r\n    state,\r\n    transition,\r\n    style,\r\n    animate,\r\n} from '@angular/animations';\r\n\r\nexport const toastAnimations: {\r\n    readonly fadeToast: AnimationTriggerMetadata;\r\n} = {\r\n    fadeToast: trigger('fadeAnimation', [\r\n        state('default', style({ opacity: 1 })),\r\n        transition('void => *', [style({ opacity: 0 }), animate('{{ fadeIn }}ms')]),\r\n        transition(\r\n            'default => closing',\r\n            animate('{{ fadeOut }}ms', style({ opacity: 0 })),\r\n        ),\r\n    ]),\r\n};\r\n\r\nexport type ToastAnimationState = 'default' | 'closing';\r\n","import {\r\n    Component,\r\n    OnInit,\r\n    ChangeDetectionStrategy,\r\n    OnDestroy\r\n} from '@angular/core';\r\nimport {\r\n    ToastData\r\n} from '../shared/classes/toast-config';\r\nimport { ToastRef } from '../shared/classes/toast-ref';\r\nimport {\r\n    toastAnimations,\r\n    ToastAnimationState\r\n} from '../shared/animations/toast-fade.animation';\r\nimport { AnimationEvent } from '@angular/animations';\r\n\r\n@Component({\r\n    selector: 'umbra-messaging-toast',\r\n    templateUrl: './umbra-toast.component.html',\r\n    styleUrls: [ './umbra-toast.component.css' ],\r\n    animations: [ toastAnimations.fadeToast ],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class UmbraToastComponent implements OnInit, OnDestroy {\r\n    animationState: ToastAnimationState = 'default';\r\n    iconType: string;\r\n\r\n    private intervalId: number;\r\n\r\n    constructor(\r\n        readonly data: ToastData,\r\n        readonly ref: ToastRef\r\n    ) {\r\n        this.iconType = data.type === 'success' ? 'done' : data.type;\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.intervalId = setTimeout(() => this.animationState = 'closing', 5000);\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        clearTimeout(this.intervalId);\r\n    }\r\n\r\n    close() {\r\n        this.ref.close();\r\n    }\r\n\r\n    onFadeFinished(event: AnimationEvent) {\r\n        const {toState} = event;\r\n        const isFadeOut = (toState as ToastAnimationState) === 'closing';\r\n        const itFinished = this.animationState === 'closing';\r\n\r\n        if (isFadeOut && itFinished) {\r\n            this.close();\r\n        }\r\n    }\r\n}\r\n","import {\r\n    Inject,\r\n    Injectable,\r\n    Injector\r\n} from '@angular/core';\r\nimport { Overlay } from '@angular/cdk/overlay';\r\nimport {\r\n    ComponentPortal,\r\n    PortalInjector\r\n} from '@angular/cdk/portal';\r\nimport { ToastRef } from '../classes/toast-ref';\r\nimport {\r\n    defaultToastConfig,\r\n    ToastData\r\n} from '../classes/toast-config';\r\nimport { ToastConfigInterface } from '../interfaces/toast-config.interface';\r\nimport { UmbraToastComponent } from '../../umbra-toast/umbra-toast.component';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class UmbraToastService {\r\n    private lastToast: ToastRef;\r\n    private toastConfig: ToastConfigInterface;\r\n\r\n    constructor(\r\n        private overlay: Overlay,\r\n        private parentInjector: Injector\r\n    ) {}\r\n\r\n    showToast(toastConfig: ToastConfigInterface) {\r\n        console.log('Config', toastConfig);\r\n        if (toastConfig === null || toastConfig === undefined) {\r\n            this.toastConfig = defaultToastConfig;\r\n        }\r\n\r\n        const positionStrategy = this.getPositionStrategy();\r\n        const overlayRef = this.overlay.create({positionStrategy});\r\n\r\n        const toastRef = new ToastRef(overlayRef);\r\n\r\n        const injector = this.getInjector(toastConfig.toastData, toastRef,\r\n            this.parentInjector);\r\n        const toastPortal = new ComponentPortal(UmbraToastComponent, null, injector);\r\n\r\n        overlayRef.attach(toastPortal);\r\n\r\n        return toastRef;\r\n    }\r\n\r\n    getPositionStrategy() {\r\n        return this.overlay.position()\r\n            .global()\r\n            .top(this.getPosition())\r\n            .right(this.toastConfig.position.right + 'px');\r\n    }\r\n\r\n    getPosition() {\r\n        const lastToastIsVisible = this.lastToast && this.lastToast.isVisible();\r\n        const position = lastToastIsVisible\r\n            ? this.lastToast.getPosition().bottom\r\n            : this.toastConfig.position.top;\r\n\r\n        return position + 'px';\r\n    }\r\n\r\n    getInjector(data: ToastData, toastRef: ToastRef, parentInjector: Injector) {\r\n        const tokens = new WeakMap();\r\n\r\n        tokens.set(ToastData, data);\r\n        tokens.set(ToastRef, toastRef);\r\n\r\n        return new PortalInjector(parentInjector, tokens);\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { UmbraToastComponent } from './umbra-toast.component';\r\nimport { OverlayModule } from '@angular/cdk/overlay';\r\nimport { MatIconModule } from '@angular/material';\r\n\r\n@NgModule({\r\n    declarations: [ UmbraToastComponent ],\r\n    imports: [\r\n        CommonModule,\r\n        OverlayModule,\r\n        MatIconModule\r\n    ],\r\n    entryComponents: [ UmbraToastComponent ]\r\n})\r\nexport class UmbraToastModule {}\r\n"]}