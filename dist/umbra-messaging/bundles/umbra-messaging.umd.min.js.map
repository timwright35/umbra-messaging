{"version":3,"sources":["ng://umbra-messaging/lib/shared/classes/toast-ref.ts","ng://umbra-messaging/lib/shared/classes/toast-config.ts","ng://umbra-messaging/lib/shared/animations/toast-fade.animation.ts","ng://umbra-messaging/lib/umbra-toast/umbra-toast.component.ts","ng://umbra-messaging/lib/shared/services/umbra-toast.service.ts","ng://umbra-messaging/lib/umbra-toast/umbra-toast.module.ts"],"names":["ToastRef","overlay","this","prototype","close","dispose","isVisible","overlayElement","getPosition","getBoundingClientRect","ToastData","defaultToastConfig","position","top","right","animation","fadeOut","fadeIn","toastAnimations","InjectionToken","fadeToast","trigger","state","style","opacity","transition","animate","UmbraToastComponent","data","ref","animationState","iconType","type","ngOnInit","_this","intervalId","setTimeout","ngOnDestroy","clearTimeout","onFadeFinished","event","isFadeOut","toState","itFinished","Component","args","selector","template","animations","changeDetection","ChangeDetectionStrategy","OnPush","UmbraToastService","parentInjector","showToast","toastData","toastConfig","positionStrategy","getPositionStrategy","overlayRef","create","toastRef","injector","getInjector","toastPortal","ComponentPortal","attach","global","lastToast","bottom","tokens","WeakMap","set","PortalInjector","Injectable","providedIn","Overlay","Injector","UmbraToastModule","NgModule","declarations","imports","CommonModule","OverlayModule","MatIconModule","entryComponents"],"mappings":"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","sourcesContent":["import { OverlayRef } from '@angular/cdk/overlay';\n\nexport class ToastRef {\n    constructor(private readonly overlay: OverlayRef) { }\n\n    close() {\n        this.overlay.dispose();\n    }\n\n    isVisible() {\n        return this.overlay && this.overlay.overlayElement;\n    }\n\n    getPosition() {\n        return this.overlay.overlayElement.getBoundingClientRect();\n    }\n}\n","import { InjectionToken, TemplateRef } from '@angular/core';\nimport { ToastConfigInterface } from '../interfaces/toast-config.interface';\nimport { ToastType } from '../types/toast.type';\n\nexport class ToastData {\n    type: ToastType;\n    text?: string;\n    template?: TemplateRef<any>;\n    templateContext?: {};\n}\n\nexport const defaultToastConfig: ToastConfigInterface = {\n    position: {\n        top: 20,\n        right: 20,\n    },\n    animation: {\n        fadeOut: 2500,\n        fadeIn: 300,\n    },\n};\n\nexport const TOAST_CONFIG_TOKEN = new InjectionToken<ToastConfigInterface>('toast-config');\n","import {\n    AnimationTriggerMetadata,\n    trigger,\n    state,\n    transition,\n    style,\n    animate,\n} from '@angular/animations';\n\nexport const toastAnimations: {\n    readonly fadeToast: AnimationTriggerMetadata;\n} = {\n    fadeToast: trigger('fadeAnimation', [\n        state('default', style({ opacity: 1 })),\n        transition('void => *', [style({ opacity: 0 }), animate('{{ fadeIn }}ms')]),\n        transition(\n            'default => closing',\n            animate('{{ fadeOut }}ms', style({ opacity: 0 })),\n        ),\n    ]),\n};\n\nexport type ToastAnimationState = 'default' | 'closing';\n","import {\n  Component,\n  OnInit,\n  ChangeDetectionStrategy,\n  Inject,\n  OnDestroy\n} from '@angular/core';\nimport {\n  TOAST_CONFIG_TOKEN,\n  ToastData\n} from '../shared/classes/toast-config';\nimport { ToastRef } from '../shared/classes/toast-ref';\nimport { ToastConfigInterface } from '../shared/interfaces/toast-config.interface';\nimport {\n  toastAnimations,\n  ToastAnimationState\n} from '../shared/animations/toast-fade.animation';\nimport { AnimationEvent } from '@angular/animations';\n\n@Component({\n  selector: 'umbra-messaging-toast',\n  templateUrl: './umbra-toast.component.html',\n  styleUrls: ['./umbra-toast.component.css'],\n  animations: [toastAnimations.fadeToast],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class UmbraToastComponent implements OnInit, OnDestroy {\n  animationState: ToastAnimationState = 'default';\n  iconType: string;\n\n  private intervalId: number;\n\n  constructor(\n      readonly data: ToastData,\n      readonly ref: ToastRef\n  ) {\n    this.iconType = data.type === 'success' ? 'done' : data.type;\n  }\n\n  ngOnInit() {\n    this.intervalId = setTimeout(() => this.animationState = 'closing', 5000);\n  }\n\n  ngOnDestroy() {\n    clearTimeout(this.intervalId);\n  }\n\n  close() {\n    this.ref.close();\n  }\n\n  onFadeFinished(event: AnimationEvent) {\n    const { toState } = event;\n    const isFadeOut = (toState as ToastAnimationState) === 'closing';\n    const itFinished = this.animationState === 'closing';\n\n    if (isFadeOut && itFinished) {\n      this.close();\n    }\n  }\n}\n","import {\n  Inject,\n  Injectable,\n  Injector\n} from '@angular/core';\nimport { Overlay } from '@angular/cdk/overlay';\nimport {\n  ComponentPortal,\n  PortalInjector\n} from '@angular/cdk/portal';\nimport { ToastRef } from '../classes/toast-ref';\nimport {\n  defaultToastConfig,\n  TOAST_CONFIG_TOKEN,\n  ToastData\n} from '../classes/toast-config';\nimport { ToastConfigInterface } from '../interfaces/toast-config.interface';\nimport { UmbraToastComponent } from '../../umbra-toast/umbra-toast.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UmbraToastService {\n  private lastToast: ToastRef;\n  private toastConfig: ToastConfigInterface;\n\n  constructor(\n      private overlay: Overlay,\n      private parentInjector: Injector\n  ) {}\n\n  showToast(toastData: ToastData, toastConfig?: ToastConfigInterface) {\n    if (toastConfig === null || toastConfig === undefined) {\n      this.toastConfig = defaultToastConfig;\n    }\n\n    const positionStrategy = this.getPositionStrategy();\n    const overlayRef = this.overlay.create({ positionStrategy });\n\n    const toastRef = new ToastRef(overlayRef);\n\n    const injector = this.getInjector(toastData, toastRef, this.parentInjector);\n    const toastPortal = new ComponentPortal(UmbraToastComponent, null, injector);\n\n    overlayRef.attach(toastPortal);\n\n    return toastRef;\n  }\n\n  getPositionStrategy() {\n    return this.overlay.position()\n        .global()\n        .top(this.getPosition())\n        .right(this.toastConfig.position.right + 'px');\n  }\n\n  getPosition() {\n    const lastToastIsVisible = this.lastToast && this.lastToast.isVisible();\n    const position = lastToastIsVisible\n        ? this.lastToast.getPosition().bottom\n        : this.toastConfig.position.top;\n\n    return position + 'px';\n  }\n\n  getInjector(data: ToastData, toastRef: ToastRef, parentInjector: Injector) {\n    const tokens = new WeakMap();\n\n    tokens.set(ToastData, data);\n    tokens.set(ToastRef, toastRef);\n\n    return new PortalInjector(parentInjector, tokens);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { UmbraToastComponent } from './umbra-toast.component';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { MatIconModule } from '@angular/material';\n\n@NgModule({\n    declarations: [ UmbraToastComponent ],\n    imports: [\n        CommonModule,\n        OverlayModule,\n        MatIconModule\n    ],\n    entryComponents: [ UmbraToastComponent ]\n})\nexport class UmbraToastModule {}\n"]}